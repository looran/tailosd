#!/usr/bin/env python


import os
import sys
import argparse
import signal
import getpass

import tailosd

_w = None
USER = getpass.getuser()
PIDFILE = "/var/run/tailosd_%s.pid" % USER

def _sigint(signal, frame):
    print('ctrl-c, exiting')
    os.remove(PIDFILE)
    sys.exit(0)

def _sighup(signal, frame):
    print('sighup, reloading filters')
    _w.reload_conf()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='OSD file tailer')
    parser.add_argument('-d', dest='debug', action='store_true',
                        help='Debug mode')
    parser.add_argument('-f', dest='config_file',
                        help='Configuration file for severity filters and colors')
    parser.add_argument('-r', dest='reload', action='store_true',
                        help='Trigger reload of filter rules in running instance')
    parser.add_argument('-l', dest='loglevel', choices=tailosd.SEVERITY_CHOICES,
                        help='Log level [default=%s]' % tailosd.SEVERITY_DEFAULT)
    parser.add_argument('target', nargs='*',
                        help='File paths to monitor | \'systemd\'')
    args = parser.parse_args()

    if args.reload:
        if not os.path.exists(PIDFILE):
            parser.error("PID file does not exist, is tailosd running under same user \"%s\" ? (%s)" % (USER, PIDFILE))
        with open(PIDFILE) as f:
            os.kill(int(f.read()), signal.SIGHUP)
        print("signal sent to running tailosd")
        sys.exit(0)

    target = dict()
    for t in args.target:
        if t == "systemd":
            if "files" in target:
                parser.error("Cannot use 'systemd' together with files")
            target["systemd"] = True
        else:
            if "systemd" in target:
                parser.error("Cannot use files together with systemd")
            if not os.path.isfile(t):
                parser.error("File does not exist : %s" % t)
            if not os.access(t, os.R_OK):
                parser.error("File not readable : %s" % t)
            if "files" not in target:
                target["files"] = list()
            target["files"].append(t)
    if args.loglevel:
        loglevel = args.loglevel
    elif 'TAILOSD_LOGLEVEL' in os.environ:
        loglev = os.environ.get('TAILOSD_LOGLEVEL')
    else:
        loglevel = tailosd.SEVERITY_DEFAULT
    if loglevel not in tailosd.SEVERITY_CHOICES:
        parser.error("Invalid log level %s, valid choices are : %s" % (loglevel, tailosd.SEVERITY_CHOICES))
    loglevel = tailosd.SEVERITY_CHOICES[loglevel]

    with open(PIDFILE, 'w') as f:
        f.write('%d' % os.getpid())
    signal.signal(signal.SIGINT, _sigint)
    signal.signal(signal.SIGHUP, _sighup)

    _w = tailosd.Tailosd(target, args.config_file, args.loglevel, args.debug)
    _w.run()
